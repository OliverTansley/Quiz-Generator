--
what is an atomic instruction
-
an instruction which is uninterruptable and capable of changing a value, the building block for synchronisation primitives
--
what is atomic exchange
-
interchanging a value in a register for a value in memory atomically
--
how can this be used
-
the register could indicate wether a thread lock is available, and no two threads could perform the exchange at one time
--
what are some alternative hardware primitives
-
test_and_set (circa 1990s), fetch_and_increment (current generation microprocessors)
--
what is the issue with synchronisation primitives
-
Requiring an uninterruptible read and write to memory complicates several aspects of
microprocessor operation (Coherance,Instruction pipelining,Cache performance)
--
what is instruction pairing
-
when instruction return values from first to second, to determine whether they executed atomically
--
how can a load linked and store conditional function pair fail
-
if a memory access or context switch occurs
--
INSTRUCTION PAIRING AND FETCH AND INCREMENT
-
WATCH LIVE LECTURE
--
what are spin locks
-
a lock that causes a thread trying to acquire it to simply wait in a loop while repeatedly checking whether the lock is available. 
--
when are spin locks effective
-
when the lock is only going to be held for a short period of time, when there is a low latency between going from locked and unlocked states
--
what are the advantages of caching locks
-
testing the status of the lock doesnt require as long of an access, acquisition time for a processor that repeatedly gets lock for a short time is decreased
--
what are the different consistency models for program execution
-
sequential consistency, syncrhonised consistency,relaxed consistency
--
what is sequential consistency
-
when operations on any given thread run in their order specified, but operations between processors can be interleaved arbitrarily
--
