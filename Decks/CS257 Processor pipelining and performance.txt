--
what are MIPS
-
Millions of Instructions Per Second
--
What does the performance of a parrallel system depend on
-
Degree of parrallelism,Interconnection structure,main memory architecture, degree of instruction parrallelism
--
what are FLOPS
-
Floating point Operations Per Second
--
why is the maximum performance of n processors with p performance never achieved
-
Non highly parrallel algorithms, Inter processors communication delays
--
what is speedup
-
speed before change/speed after change
--
how do you calculate processor utilisation/efficiency
-
speedup/number of cores
--
What is a programs degree of parrallelism
-
The number of cores which allow the program to reach its maximum speedup and efficiency or maximum level of parrallelism that can be exploited by the program 
--
What is the average throughput of a program with both vector and scalar operations
-
1/b = f/b_s + (1-f)/b_v
--
what is the execution time for 1 N component vector operation
-
T_v = N/b_v
--
what is the execution time for 1 scalar operation
-
T_s = 1/b_s
--
Assuming T_v = T_0 + (NT_s)/n what is the average throughput
-
ignore T_0 when N is large
FINISH CARD
--
what is amdahls law
-
speedup = n/(1 + (n-1)f)
--
What is the problem with Instruction Fetch - Execute pipelining
-
memory contention between both units (indirect address cycle)
--
what is a possible solution to the IF-E pipelining problem
-
Use banked/interleaved memory to seperate instruction and data into different memory circuits
--
describe Asynchronous pipelining
-
Uses 'handshaking signals' to indicate completion/ready for passing data
most flexible allowing variable length buffers between stages
--
describe synchronous pipelining
-
One timing signal is used for all stages in the pipeline, determined by the slowest stage
IF-E pipelines use synchronous timing due to simplicity
Incorparate latches known as staging registers
--
what are the three 'pipeline Hazards'
-
structural hazards (resource conflicts)
Control hazards (procedural dependancies)
Data Hazards
--
Give an example of a structural hazard and its possible solutions
-
Example: 2 stages wishing to use the same memory port in the same clock cycle
Use interleaved memory, stages have seperate banks
Fetch more than one data item at a time, freeing the use of memory at other times
--
Give an example of a Control hazard 
-
branch and jump instructions (cause the pipeline to flush)
--
Name the methods of mitigating pipeline control hazards
-
Instruction pre-fetch buffers, pipeline freeze, static/dynamic prediction
--
what is an instruction pre-fetch buffer
-
memory which holds one of the possible sequences of instructions that may execute after a branch (assumes interleaved memory)
branch unit BrU is used to execute branch instruction as soon as is fetched, the 'incorrect' instructions are discarded
--
explain the pipeline freeze strategy
-
on a branch instruction freeze the pipeline, to avoid wasting time flushing it, simple to implement but poor performance
--
explain static prediction
-
hardwired circuit forces to predict to either take branch or not, 60% of branches are taken so this could be good for performance
not taking branches avoids losing pipeline cycles therefore could be better for performance
--
Name the 3 types of dynamic prediction
-
predict on: branch instruction characteristics, target addr characteristics, branch history
--
describe prediction on branch instruction characteristics
-
provide a bit in the branch instruction (set by low-level
programmer or compiler) to indicate the most likely outcome of branch, e.g., if loop is being programmed,
set bit to ‘Take Branch’
--
describe Predict on Target Address Characteristics
-
short branches and backward branches are characteristics of loops in a program and are usually taken, while long branches are used for major
changes in program control and are usually not taken
--
describe Predict on Branch History
-
if a bit is set or reset on the outcome of an execution, that bit is a good predictor of the next execution
--
describe what a data hazard is
-
if data is read which is about to be updated by another instruction in the pipeline (incorrect data fetched)
--
what determines the speed of a synchronous pipeline
-
the slowest stage in the pipeline (usually execution unit)
--
how do you work out efficiency of a pipeline
-
(busy area)/(total area)
--
how do you work out the speed increase of a pipeline
-
nN/(N+ (n-1)), n is number of stages and N is the number of instructions executed
--