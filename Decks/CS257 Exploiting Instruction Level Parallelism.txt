--
what does Superscalar processing rely on
-
the ability to execute independant instructions in different pipelines
--
how do we extend Superscalar processing
-
by allowing instrucitons to be executed in a different order from that specified by a program
--
what are the constraints on instruction level parallelism
-
true data dependancy, procedural dependancy, resource conflicts,output dependancy,antidependancy
--
what is true data dependancy
-
an instruciton can not execute because it requires data that will be produced by a preceding instruction
--
what is procedural dependancy
-
when features of the sequence of instruciton execution hault out of order execution (e.g. branch operations, variable length instructions)
--
what are resource conflicts
-
when different instructions require the same resources (memory,cache,functional units) simultaneously
--
what is an instruciton issue policy
-
rules about when instructions are issued into the execution stage
--
what three instruction orders are significant to the processor
-
order which instructions are fetched, order in which instructions are executed, order in which instructions update the contents of memory locations
--
what are the three instruction issue policies
-
in order issue with in order execution, in order issue with out of order completion,out of order issue with out of order completion
--
describe in order issue with in order execution
-
issue instructions and complete them in the same order as sequential execution
--
describe in order issue with out of order execution
-
any number of instructions may be in the execution stage at any time, still issued in order tho
--
describe out of order issue with out of order completion
-
an instruction window continually recieves instructions being decoded, the execution units select instructions from the window 
in any order provided that: there are no true data dependancies on that instructions and there are no functional dependancies
--
what is register renaming
-
when registers are dynamically given different meanings at runtime to ensure that instrucitons
executed out of order have access to data in the state that they expect at the time of their 
execution
--
how do we stop branching from affecting pipeline performance
-
prefetch instructions from both sides of a branch
--
what is the delayed branch strategy
-
Processor calculates the result of conditional branches before any
unusable instructions have been prefetched
--
what is the downside of delayed branch strategy
-
Multiple instructions need to be executed in the delay slot, which is
difficult when dependencies exist between instructions
--
